#!/bin/bash

# ---------- CREATE NON-ROOT USER -----------

useradd --create-home --user-group --shell /bin/bash _spaceify > /dev/null 2>&1 || true

# ----------
# ----------
# ----------
# ----------
# ---------- CONSTANTS ---------- #

start_spaceify="# Added by Spaceify"
end_spaceify="# Added by Spaceify ends"
comm_out_spaceify="# Commented out by Spaceify: "

# ----------
# ----------
# ----------
# ----------
# ---------- DEBCONF - GET INPUT ---------- #

. /var/lib/spaceify/data/scripts/input.sh

eth=$(< /var/lib/spaceify/data/interfaces/ethernet)
wlan=$(< /var/lib/spaceify/data/interfaces/wlan)
is_internal=$(< /var/lib/spaceify/data/interfaces/is_internal)
# edge_name=$(< /var/lib/spaceify/data/db/edge_name)

# ----------
# ----------
# ----------
# ----------
# ---------- DATABASE ---------- #

. /var/lib/spaceify/data/scripts/database.sh						# database mangement, get previous version information
dbpath="/var/lib/spaceify/data/db/spaceify.db"

edge_name=$(sqlite3 $dbpath "SELECT edge_name FROM user;" 2>/dev/null)

# ----------
# ----------
# ----------
# ----------
# ---------- MODIFY CONFIGURATION SCRIPTS ---------- #

# ----- /etc/network/interfaces - give ip to wlan0 (or what adapter names user selected) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/network/interfaces > /dev/null 2>&1 || true	# remove Spaceify's previous comments/entries

sed -i "/${wlan}/,/^$/s/^/${comm_out_spaceify}&/g" /etc/network/interfaces					# comment out existing wlan (range: first line with string $wlan until empty line)

wlan_conf=$(< /etc/network/interfaces)
wlan_conf="${wlan_conf}\n\n${start_spaceify}\n"												# append new configuration
wlan_conf="${wlan_conf}auto ${wlan}\n"
wlan_conf="${wlan_conf}iface ${wlan} inet static\n"
wlan_conf="${wlan_conf}address 10.0.0.1\n"
wlan_conf="${wlan_conf}netmask 255.255.255.0\n"
wlan_conf="${wlan_conf}${end_spaceify}"
printf "$wlan_conf" > /etc/network/interfaces

	# ----- /etc/default/docker, /etc/systemd/system/docker.service.d/noiptables.conf ----- #

sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/docker > /dev/null 2>&1 || true	# remove Spaceify's previous entries

if [ -s /etc/default/docker ]; then
	docker_conf=$(< /etc/default/docker)
else
	docker_conf=""
fi

docker_conf="${docker_conf}\n\n${start_spaceify}\n"											# Old style
docker_conf="${docker_conf}DOCKER_OPTS=\"--dns 10.0.0.1 --iptables=false\"\n"
docker_conf="${docker_conf}${end_spaceify}"
printf "$docker_conf" > /etc/default/docker

if [ ! -e /etc/systemd/system/docker.service.d/noiptables.conf ]; then						# New systemd style
	mkdir -p /etc/systemd/system/docker.service.d/ > /dev/null 2>&1 || true
	touch /etc/systemd/system/docker.service.d/noiptables.conf > /dev/null 2>&1 || true
	chmod 0664 /etc/systemd/system/docker.service.d/noiptables.conf > /dev/null 2>&1 || true
fi
docker_conf="[Service]\n"
docker_conf="${docker_conf}ExecStart=\n"
docker_conf="${docker_conf}ExecStart=/usr/bin/docker daemon -H fd:// --dns 10.0.0.1 --iptables=false\n"
printf "$docker_conf" > /etc/systemd/system/docker.service.d/noiptables.conf

	# ----- /etc/rc.local ----- #

. /var/lib/spaceify/data/scripts/iptables.sh "rclocal"										# iptables rules

	# ----- /etc/sysctl.conf - enable forwarding (for nat) ----- #

sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/sysctl.conf > /dev/null 2>&1 || true

sysctl=$(< /etc/sysctl.conf)
sysctl=$( echo "$sysctl" | sed "s/.*net.ipv4.ip_forward.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
sysctl="${sysctl}\n\n${start_spaceify}\nnet.ipv4.ip_forward=1\n${end_spaceify}"				# append new value
printf "$sysctl" > /etc/sysctl.conf

	# ----- /etc/hostapd/hostapd_spaceify-ap.conf and /etc/default/hostapd - configure/enable AP ----- #

if [[ "$is_internal" -eq "1" ]]; then														# configure
	sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true

	hostap="$start_spaceify\n"
	hostap="${hostap}interface=${wlan}\n"
	hostap="${hostap}driver=nl80211\n"
	hostap="${hostap}ssid=spaceify\n"
	hostap="${hostap}channel=6\n"
	hostap="${hostap}${end_spaceify}"
	printf "$hostap" > /etc/hostapd/hostapd_spaceify.conf

	dhostapd=$(< /etc/default/hostapd)
	dhostapd=$( echo "$dhostapd" | sed "s/.*DAEMON_CONF.*=.*/${comm_out_spaceify}&/" )		# comment out original entry
	dhostapd="${dhostapd}\n\n${start_spaceify}\nDAEMON_CONF=/etc/hostapd/hostapd_spaceify.conf\n${end_spaceify}"	# append new value
	printf "$dhostapd" > /etc/default/hostapd
else																						# comment configuration if hostpad is installed and it has hostapd_spaceify.conf configuration
	hpd=$( dpkg-query -W -f='${Status}\n' hostapd )
	hpd=$( echo "$hpd" | sed -n '/installed/{p;q;}' )
	if [[ "$hpd" != "" ]]; then
		service hostapd stop																# stop hostapd
		sed -i -e "s/${comm_out_spaceify}//g" -e "/${start_spaceify}/,/${end_spaceify}/d" /etc/default/hostapd > /dev/null 2>&1 || true	# restore previous configuration
	fi
fi

	# ----- /etc/monit/monitrc ----- #

#sed -i "/${start_spaceify}/,/${end_spaceify}/d" /etc/monit/monitrc							# remove Spaceify's previous entries

#monit=$(< /etc/monit/monitrc)
#monit="${monit}\n\n${start_spaceify}\n"													# append new configuration
#monit="${monit}include /var/lib/spaceify/monit/spaceify.conf\n"
#monit="${monit}${end_spaceify}\n"
#printf "$monit" > /etc/monit/monitrc

core_port=$(cat /var/lib/spaceify/code/config.json | grep "CORE_PORT" | sed 's/[^0-9]*//g')
core_port=$(echo $core_port | awk -F ' ' '{print $1}')
#sed -i "s/%1/${core_port}/" /etc/monit/conf.d/spaceify.conf									# change the monitored port to the configuration


################## DNS CONFIGURATION #########################################

dnsmasqconf="listen-address=127.0.0.1,10.0.0.1 \n"
dnsmasqconf="${dnsmasqconf}address=/edge.spaceify.net/10.0.0.1\n"

if [ "$edge_name" != "" ]; then
	dnsmasqconf="${dnsmasqconf}address=/${edge_name}.spaceify.net/10.0.0.1\n"				# edge_name = groupId in remote operation
fi
dnsmasqconf="${dnsmasqconf}dhcp-range=10.0.0.2,10.0.0.254,4h\n"
dnsmasqconf="${dnsmasqconf}dhcp-option=3,10.0.0.1\n"
dnsmasqconf="${dnsmasqconf}dhcp-option=6,10.0.0.1\n"
dnsmasqconf="${dnsmasqconf}dhcp-option=15,edge.spaceify.net\n"
dnsmasqconf="${dnsmasqconf}dhcp-authoritative"

#If NetworkManager is installed, configure the dnsmasq that shipped with it

if [ -f /etc/NetworkManager/NetworkManager.conf ]; then

	printf "$dnsmasqconf" > /etc/NetworkManager/dnsmasq.d/spaceify.conf

else

	printf "$dnsmasqconf" > /etc/dnsmasq.d/spaceify.conf

fi

################## DNS CONFIGURATION ENDS ####################################

# ----- /etc/udhcpd.conf, /etc/default/udhcpd ----- #

#mv /etc/udhcpd.conf /etc/udhcpd.conf.original > /dev/null 2>&1 || true						# store existing configuration
#mv /etc/default/udhcpd /etc/default/udhcpd.original > /dev/null 2>&1 || true

#dhcpd="start 10.0.0.2\n"
#dhcpd="${dhcpd}end 10.0.0.254\n"
#dhcpd="${dhcpd}interface ${wlan}\n"
#dhcpd="${dhcpd}opt dns 10.0.0.1 10.0.0.1\n"
#dhcpd="${dhcpd}option dns 10.0.0.1\n"
#dhcpd="${dhcpd}opt router 10.0.0.1\n"
#dhcpd="${dhcpd}option subnet 255.255.255.0\n"
#dhcpd="${dhcpd}option lease 7200\n"
#dhcpd="${dhcpd}option domain spaceify.net\n"
#dhcpd="${dhcpd}opt broadcast 10.0.0.255\n\n"
#printf "$dhcpd" > /etc/udhcpd.conf

#dhcpd="DHCPD_ENABLED=\"yes\"\n"
#dhcpd="${dhcpd}DHCPD_OPTS=\"-S\"\n\n"
#printf "$dhcpd" > /etc/default/udhcpd

	# ----- Misc ----- #
#sed -i "s/interface1/${eth}/g" /etc/init/spaceifydns.conf									# Replace the real network interface names to the dns service script
#sed -i "s/interface2/${wlan}/g" /etc/init/spaceifydns.conf

cd /																						# For develop mode (removed in postrm)
ln -s /var/lib/spaceify/code/ api

# ----------
# ----------
# ----------
# ----------
# ---------- EXECUTE COMMANDS ---------- #

	# ----- Update node.js to the latest stable release ----- #
printf "\n\e[4mUpdating Node.js\e[0m\n\n"
cd /var/lib/spaceify/code

npm install npm -g
npm cache clear -f
npm install -g n
n 8.10.0
sudo npm uninstall node-gyp
sudo npm install --unsafe-perm -g node-gyp
sudo npm uninstall bufferutil
sudo npm install --unsafe-perm -g bufferutil

	# ----- Add custom iptables chains for Spaceify ----- #

. /var/lib/spaceify/data/scripts/iptables.sh "delete"										# Delete existing rules first to avoid duplicates

. /var/lib/spaceify/data/scripts/iptables.sh "add"											# Add the rules

	# ----- Enable IP forwarding ----- #

echo 1 > /proc/sys/net/ipv4/ip_forward

	# ----- Certificates and keys ----- #

mkdir /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true
mkdir /var/lib/spaceify/data/tls/ > /dev/null 2>&1 || true

if [ ! -f /var/lib/spaceify/data/scripts/spaceifyCA/spaceify.crt ] ||						# Setup CA if it doesn't exists
   [ ! -f /var/lib/spaceify/data/scripts/spaceifyCA/spaceify.key ]; then

	printf "\n\e[4mSetting up certificate authority for this edge node\e[0m\n\n"

	. /var/lib/spaceify/data/scripts/makeca.sh

fi

if [ ! -f /var/lib/spaceify/data/tls/server.crt ] ||										# Remake server key and certificate if necessary
   [ ! -f /var/lib/spaceify/data/tls/server.key ]; then

	printf "\n\e[4mCreating server certificate and key for this edge node\e[0m\n\n"

	. /var/lib/spaceify/data/scripts/makeserver.sh "/var/lib/spaceify/data/tls/" "Edge server"

fi

cp /var/lib/spaceify/data/scripts/spaceifyCA/spaceify.crt /var/lib/spaceify/code/www/ > /dev/null 2>&1 || true       # Copy the CA certificate to the www directory

	# ----- File permissions etc. ----- #

# mkdir -p /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true						# dhcp server directories/files
# chmod -R 0664 /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true
# chown - R root:spaceify /var/lib/spaceify/data/dhcp-data > /dev/null 2>&1 || true

chmod -R 0664 /var/lib/spaceify/data/iptables-data > /dev/null 2>&1 || true					# iptables directories/file
# chown - R root:spaceify /var/lib/spaceify/data/iptables-data > /dev/null 2>&1 || true

chmod 0755 /usr/bin/spm > /dev/null 2>&1 || true											# Spaceify Packet Manager script

chmod 0755 /var/lib/spaceify/data/scripts/remove_containers.sh > /dev/null 2>&1 || true		# A script to stop and remove running containers and images
chmod 0755 /var/lib/spaceify/data/scripts/remove_images.sh > /dev/null 2>&1 || true

rm /var/log/spaceifyappman.log > /dev/null 2>&1 || true										# Log files are in /var/lib/spaceify/data/logs
rm /var/log/spaceifyconhub.log > /dev/null 2>&1 || true										# and these old log files are not needed anymore
rm /var/log/spaceifyhttp.log > /dev/null 2>&1 || true
rm /var/log/spaceifyipt.log > /dev/null 2>&1 || true
rm /var/log/spaceify.log > /dev/null 2>&1 || true

chmod 0755 /etc/cron.hourly/spaceifylog > /dev/null 2>&1 || true							# Check log sizes hourly

# ----------
# ----------
# ----------
# ----------
# ---------- Install the required node.js modules defined in the package.json ---------- #

printf "\n\e[4mInstalling Node.js packages\e[0m\n\n"

chown -R _spaceify:_spaceify /var/lib/spaceify/code
sudo su - _spaceify -c "cd /var/lib/spaceify/code && npm install"

chown -R root:root /var/lib/spaceify/code

# ----------
# ----------
# ----------
# ----------
# ---------- Docker image for different distributions ---------- #

printf "\n\e[4mSearching Docker image for this distribution\e[0m\n"

if [[ -n $(uname -a |& grep -i "ubun") ]]; then
	distro=$(cat /var/lib/spaceify/code/config.json | grep "UBUNTU_DISTRO_NAME" | sed 's/[^a-z]*//g')
	distro_image_name=$(cat /var/lib/spaceify/code/config.json | grep "UBUNTU_DOCKER_IMAGE" | sed 's/[^a-z]*//g')
elif [[ -n $(uname -a |& grep -i "rasp") ]]; then
	distro=$(cat /var/lib/spaceify/code/config.json | grep "RASPBIAN_DISTRO_NAME" | sed 's/[^a-z]*//g')
	distro_image_name=$(cat /var/lib/spaceify/code/config.json | grep "RASPBIAN_DOCKER_IMAGE" | sed 's/[^a-z]*//g')
fi

if_path="/var/lib/spaceify/data/docker/$distro"

$(sqlite3 $dbpath "UPDATE information SET distribution='$distro'")

release_version=$(sqlite3 $dbpath "SELECT release_version FROM information;")				# Get the version this package requires

image_row=$(grep "^${release_version}:.*$" "$if_path/image_versions")						# The image filename: <imagename>.tgz, <imagename>.tar
image_name=$(echo $image_row | awk -F : '{print $2}')
image_name_tar=$(echo $image_name | awk -F "." '{print $1}').tar

if [ -f "$if_path/$image_name_tar" ]; then

	# # # Import
	# # # Use existing image

	printf "\n\e[32mCompatible image found. Importing it.\e[0m\n"
	cat "$if_path/$image_name_tar" | sudo docker import - $distro_image_name > /dev/null

else

	# # # Load and import
	# # # The image must be loaded from spaceify.org before it can be imported

	rm "$if_path/$distro_image_name"* > /dev/null 2>&1 || true								# Remove all existing images

	printf "\n\e[32mExisting, compatible image was not found. The image is downloaded from remote server.\e[0m\n"
	curl -o "$if_path/$image_name" "https://spaceify.org/downloads/$image_name"
	gunzip "$if_path/$image_name"

	if [ -f "$if_path/$image_name_tar" ]; then
		printf "\n\e[32mImporting the image.\e[0m\n"
		cat "$if_path/$image_name_tar" | sudo docker import - $distro_image_name > /dev/null
	fi

fi

hasImage=$( echo $(docker images) | sed -n "/$distro_image_name/{p;q;}" )
if [ -z "$hasImage" ]; then
	printf "\n\e[101mThe installation is aborted because the required $distro_image_name Docker image doesn't exist. Run 'apt-get purge spaceify' to remove the incomplete installation. NOTICE: Save files that you want to preserve before removing the installation.\e[0m\n\n"
	exit 1
fi

# ----------
# ----------
# ----------
# ----------
# ---------- Registration - use existing information or create new. ---------- #

printf "\n\e[4mCreating registration information for this edge node\e[0m\n"

result=$(node /var/lib/spaceify/code/registeredge.js "createEdgeId")

printf "\n$result\n"

# ----------
# ----------
# ----------
# ----------
# ---------- Start services ---------- #

printf "\n\e[4mRestarting edge nodes network and Spaceify's services\e[0m\n"

#service udhcpd restart

printf "\nTrying to restart network. If the network does not restart, please do it manually or reboot the computer.\n"

# Bring the 10.0.0.1 interface down and up

if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
	service network-manager restart > /dev/null 2>&1 || true
else
	service dnsmasq restart > /dev/null 2>&1 || true
fi
ifdown ${wlan}
ifup ${wlan}

. /var/lib/spaceify/data/scripts/wait_network.sh 0 300 50 "Please wait, restarting network."

if [ $? -ne 0 ]; then
       printf "\e[101mThe installation is aborted because restarting the network failed. Run 'apt-get purge spaceify' to remove the incomplete installation. "
       exit 1
else
       printf "The network is restarted. Continuing the installation.\n"
fi

if [[ "$is_internal" -eq "1" ]]; then
	service hostapd restart > /dev/null 2>&1 || true
fi

#The debhelper-generated stuff should appear in place of the following comment

#DEBHELPER#

#printf "\nRestarting the services.\n"
#service spaceify restart > /dev/null 2>&1 || true
#service spaceifyappman restart > /dev/null 2>&1 || true
#service spaceifyhttp restart > /dev/null 2>&1 || true

#service monit restart > /dev/null 2>&1 || true

################## DNS CONFIGURATION ENDS #########################################

# ----------
# ----------
# ----------
# ----------
# ---------- Reinstall packages from Spaceify's previous installation ---------- #

. /var/lib/spaceify/data/scripts/install_packages.sh

# ----------
# ----------
# ----------
# ----------
# ---------- Spaceify is now installed ---------- #

versions=$(< /var/lib/spaceify/versions)													# Get the current version string
vs=$(echo $versions | awk -F : '{print $2}')
vs=${vs/,/ }

printf "\n\e[42mSpaceify version $vs is now installed. Please reboot the computer to finalize the installation.\e[0m\n\n"

# Script is found here after installation, if testing is required (eg. finding where the script fails): /var/lib/dpkg/info/spaceify.postinst
# After changing the script run dpkg-reconfigure spaceify
